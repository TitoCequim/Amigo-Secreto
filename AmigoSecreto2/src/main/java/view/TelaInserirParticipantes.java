/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package view;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
import javax.swing.JOptionPane;


/**
 *
 * @author Usuario
 */
public class TelaInserirParticipantes extends javax.swing.JFrame {
    public static List<String> listaParticipantes = new ArrayList<>();

    /**
     * Creates new form TelaInserirParticipantes
     */
    public TelaInserirParticipantes() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jTextField2 = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setText("Insira os nomes dos participantes");

        jLabel2.setText("Digite 'fim' para encerrar");

        jButton1.setText("Inserir");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jTextField2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField2ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(114, 114, 114)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1)
                    .addComponent(jButton1)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addComponent(jTextField2, javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jLabel2, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addContainerGap(111, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(53, 53, 53)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton1)
                .addContainerGap(152, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jTextField2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField2ActionPerformed
        jButton1ActionPerformed(evt);
    }//GEN-LAST:event_jTextField2ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        String nome = jTextField2.getText().trim();

        if (nome.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Nome não pode estar vazio!", "Erro", JOptionPane.ERROR_MESSAGE);
            return;
        }

        if (nome.equalsIgnoreCase("fim")) {
            if (listaParticipantes.size() < 2 || listaParticipantes.size() % 2 != 0) {
                JOptionPane.showMessageDialog(this, "É necessário no mínimo 2 participantes!", "Erro", JOptionPane.ERROR_MESSAGE);
                return;
            }

            gerarParesAleatorios();
            JOptionPane.showMessageDialog(this, "Inserção encerrada.");
            jTextField2.setEnabled(false);
            jButton1.setEnabled(false);
            opcoes opcoes = new opcoes();
            opcoes.setVisible(true);
            return;
        }

        if (listaParticipantes.contains(nome)) {
            JOptionPane.showMessageDialog(this, "Nome já inserido!", "Erro", JOptionPane.WARNING_MESSAGE);
        } else {
            listaParticipantes.add(nome);
        }

        jTextField2.setText("");
    
    }//GEN-LAST:event_jButton1ActionPerformed

    private void gerarParesAleatorios() {
        if (listaParticipantes.size() % 2 != 0) {
            JOptionPane.showMessageDialog(this, "Número ímpar de participantes! Remova ou adicione mais um participante.", "Erro", JOptionPane.WARNING_MESSAGE);
            return;
        }

        Collections.shuffle(listaParticipantes);

        StringBuilder resultado = new StringBuilder("Pares Aleatórios:\n");
        for (int i = 0; i < listaParticipantes.size(); i += 2) {
            resultado.append(listaParticipantes.get(i))
                     .append(" & ")
                     .append(listaParticipantes.get(i + 1))
                    .append("\n");
        }
        JOptionPane.showMessageDialog(this, resultado.toString(), "Pares Sorteados", JOptionPane.INFORMATION_MESSAGE);
                         // Exibe os pares na interface
        exportarParesParaArquivo();
        criptografarArquivo("pares_gerados.txt", "minhaChave123");
    }


    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(TelaInserirParticipantes.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(TelaInserirParticipantes.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(TelaInserirParticipantes.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(TelaInserirParticipantes.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        java.awt.EventQueue.invokeLater(() -> new TelaInserirParticipantes().setVisible(true));
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new TelaCadastro().setVisible(true);
            }
        });
        
    }
    
    public void exportarParesParaArquivo() {
    try (BufferedWriter writer = new BufferedWriter(new FileWriter("pares_gerados.txt"))) {
        writer.write("Pares Aleatórios:\n");
        for (int i = 0; i < listaParticipantes.size(); i += 2) {
            writer.write(listaParticipantes.get(i) + " & " + listaParticipantes.get(i + 1) + "\n");
        }
        JOptionPane.showMessageDialog(this, "Pares exportados para 'pares_gerados.txt'.", "Sucesso", JOptionPane.INFORMATION_MESSAGE);
    } catch (IOException e) {
        JOptionPane.showMessageDialog(this, "Erro ao exportar os pares.", "Erro", JOptionPane.ERROR_MESSAGE);
    }
}
    public static void abrirArquivo(String caminhoArquivo) {
    try {
        java.awt.Desktop desktop = java.awt.Desktop.getDesktop();
        desktop.open(new java.io.File(caminhoArquivo));
    } catch (IOException ex) {
        //JOptionPane.showMessageDialog(this, "Erro ao abrir o arquivo.", "Erro", JOptionPane.ERROR_MESSAGE);
    }
}
    public static void criptografarArquivo(String caminhoArquivo, String chave) {
    try {
        // Leitura do conteúdo original do arquivo
        StringBuilder conteudoOriginal = new StringBuilder();
        try (BufferedReader reader = new BufferedReader(new FileReader(caminhoArquivo))) {
            String linha;
            while ((linha = reader.readLine()) != null) {
                conteudoOriginal.append(linha).append("\n");
            }
        }

        // Criptografia do conteúdo usando XOR
        StringBuilder conteudoCriptografado = new StringBuilder();
        for (int i = 0; i < conteudoOriginal.length(); i++) {
            char c = conteudoOriginal.charAt(i);
            char chaveChar = chave.charAt(i % chave.length());
            conteudoCriptografado.append((char) (c ^ chaveChar));
        }

        // Escrita do conteúdo criptografado no arquivo
        try (BufferedWriter writer = new BufferedWriter(new FileWriter(caminhoArquivo))) {
            writer.write(conteudoCriptografado.toString());
        }

        JOptionPane.showMessageDialog(null, "Arquivo criptografado com sucesso!", "Sucesso", JOptionPane.INFORMATION_MESSAGE);
    } catch (IOException e) {
        JOptionPane.showMessageDialog(null, "Erro ao criptografar o arquivo.", "Erro", JOptionPane.ERROR_MESSAGE);
    }
}

    public static void descriptografarArquivo(String caminhoArquivo, String chave) {
        criptografarArquivo(caminhoArquivo, chave); // Chamada do mesmo método
}

    public static void abrirArquivoComRecriptografia(String caminhoArquivo, String chave) {
    try {
        // Descriptografar o arquivo antes de abrir
        descriptografarArquivo(caminhoArquivo, chave);

        // Abrir o arquivo (chamada da função de abertura existente)
        abrirArquivo(caminhoArquivo);

        // Solicitar recriptografia após manipulação
        int resposta = JOptionPane.showConfirmDialog(null, 
            "Deseja recriptografar o arquivo agora?", 
            "Recriptografar Arquivo", 
            JOptionPane.YES_NO_OPTION);

        if (resposta == JOptionPane.YES_OPTION) {
            criptografarArquivo(caminhoArquivo, chave);
            JOptionPane.showMessageDialog(null, "Arquivo recriptografado com sucesso!", "Sucesso", JOptionPane.INFORMATION_MESSAGE);
        }
    } catch (Exception e) {
        JOptionPane.showMessageDialog(null, "Erro ao abrir ou recriptografar o arquivo.", "Erro", JOptionPane.ERROR_MESSAGE);
    }
}

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JTextField jTextField2;
    // End of variables declaration//GEN-END:variables
}
